name: CI

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master, develop]

jobs:
  test:
    name: Test & Code Quality
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.21, 1.22, 1.23]

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install development tools
        run: make install-tools

      - name: Download and verify dependencies
        run: |
          make deps
          make verify

      - name: Run code quality checks
        run: make check

      - name: Run tests with coverage
        run: make test

      - name: Run race detection tests
        run: make race

      - name: Run benchmarks
        run: make benchmark

      - name: Generate coverage report
        run: make coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

  build:
    name: Build & Integration
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.22

      - name: Install development tools
        run: make install-tools

      - name: Download dependencies
        run: make deps

      - name: Build binary
        run: make build

      - name: Test xcaddy build compatibility
        run: make xcaddy-build

      - name: Run integration tests
        run: |
          # Create test Caddyfile
          cat > test-Caddyfile << EOF
          :8080 {
            usage
            respond "Hello from Caddy with usage tracking!"
          }
          EOF

          # Start Caddy in background
          ./caddy run --config test-Caddyfile &
          CADDY_PID=$!
          sleep 3

          # Test plugin functionality
          echo "Testing plugin functionality..."
          curl -f http://localhost:8080/ || exit 1
          curl -f http://localhost:8080/test || exit 1
          curl -f -X POST http://localhost:8080/api || exit 1
          curl -f -H "Authorization: Bearer test-token" http://localhost:8080/secure || exit 1
          curl -f -H "User-Agent: Test-Agent/1.0" http://localhost:8080/agent-test || exit 1

          # Stop Caddy
          kill $CADDY_PID || true

          echo "Integration test passed!"

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.22

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=5m

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.22

      - name: Run Gosec Security Scanner
        run: |
          go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
          gosec -fmt sarif -out gosec.sarif ./...

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: gosec.sarif

  comprehensive:
    name: Comprehensive Testing
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.22

      - name: Install development tools
        run: make install-tools

      - name: Download dependencies
        run: make deps

      - name: Run all CI checks
        run: make ci

      - name: Test with different configurations
        run: |
          # Test simple configuration
          echo "Testing simple_test.go specifically..."
          go test -v -run TestGetClientIPSimple ./...
          go test -v -run TestMetricsRegistration ./...
          go test -v -run TestDuplicateRegistration ./...

          # Test comprehensive configuration  
          echo "Testing comprehensive_test.go specifically..."
          go test -v -run TestHeaderMetricsProcessing ./...
          go test -v -run TestClientIPExtractionComprehensive ./...
          go test -v -run TestMetricsAccuracy ./...
          go test -v -run TestConcurrentMetricsCollection ./...
          go test -v -run TestMetricsWithDifferentURLPatterns ./...
          go test -v -run TestMetricsWithSpecialCharacters ./...

          # Test benchmark functions
          echo "Testing benchmark_test.go specifically..."
          go test -v -run BenchmarkClientIPExtraction ./...
          go test -v -run BenchmarkHeaderMetricsCollection ./...
          go test -v -run BenchmarkMetricsRegistration ./...

  cross-platform:
    name: Cross Platform Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go-version: [1.22]

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: go test -v ./...

      - name: Build binary
        run: go build -v ./...
